---
- name: TOWER-AS3-BIG-IQ - ONBOARD BIG-IP on BIG-IQ
  hosts: bigiq
  connection: local
  gather_facts: false

  tasks:

    - set_fact:
        mgmt: "{{ hostvars[inventory_hostname]['mgmt_ip'] }}:{{ hostvars[inventory_hostname]['mgmt_port'] }}"

    # Get authentication token for uri module tasks below
    - name: Authenticate to BIG-IQ
      uri:
        url: "https://{{ mgmt }}/mgmt/shared/authn/login"
        method: POST
        headers:
          Content-Type: application/json
        body:
          username: "{{ bigiq_user }}"
          password: "{{ bigiq_pass }}"
          loginProviderName: local
        body_format: json
        timeout: 60
        status_code: 200, 202
        validate_certs: false
      register: auth

    # By default, LTM is provisioned, so adding to the list of modules to discover when registering on BIG-IQ. 
    - set_fact:
        provisioned_modules: ['ltm']

    # Get list of regkey pools
    - name: Get list of regkey pools
      uri:
        headers:
          X-F5-Auth-Token: "{{ auth.json.token.token }}"
        method: GET
        status_code: 200,202
        url: "https://{{ mgmt }}/mgmt/cm/device/licensing/pool/regkey/licenses"
        validate_certs: false
        timeout: 60
      register: regkey_pool_list
      delegate_to: localhost

    - debug:
        var: regkey_pool_list

    - name: Get user defined regkey pool ID
      set_fact:
        regkey_pool_id: "{{ regkey_pool_list | json_query(query) | join(' ') }}"
      vars: 
        query: "json.items[?name=='{{ regkey_pool_name }}'].id"

    # Get all regkeys from user defined regkey pool
    - name: Get all available regkeys from user defined regkey pool
      uri:
        headers:
          X-F5-Auth-Token: "{{ auth.json.token.token }}"
        method: GET
        status_code: 200,202
        url: "https://{{ mgmt }}/mgmt/cm/device/licensing/pool/regkey/licenses/{{ regkey_pool_id }}/offerings"
        validate_certs: false
        timeout: 60
      register: available_regkey_list
      delegate_to: localhost

    # Filter for only available regkeys
    - name: Filter for only available regkeys
      set_fact:
        available_regkeys: "{{ available_regkey_list | json_query(query) }}"
      vars: 
        query: "json.items[?status=='READY'].regKey"

    - debug:
        var: available_regkeys

    # Do not proceed if no available regkeys
    - fail:
        msg: There are no available registration keys for activating BIG-IP. Please reclaim unused keys or contact your F5 Sales Representative for additional keys.
      when: available_regkeys | length == 0

    # Check whether BIG-IP is already licensed
    - name: Collect BIG-IP information
      bigip_device_facts:
        gather_subset:
          - devices
        provider:
          server: "{{ bigip_mgmt }}"
          user: "{{ bigip_user }}"
          password: "{{ bigip_password }}"
          validate_certs: no
      delegate_to: localhost
      register: bigip_facts

    - debug:
        var: bigip_facts

    - debug:
        var: bigip_facts.devices[0].active_modules

    # Check if active_modules exists, which indicates licensed status
    - name: Filter for active modules, set to null if not there
      set_fact:
        bigip_license_status: "{{ bigip_facts | json_query('devices[0].active_modules') }}"

    - debug:
        var: bigip_license_status

    # This doesn't seem to work
    # # Example to get an available key:https://github.com/ansible/ansible_collections_f5/blob/master/plugins/lookup/bigiq_license.py
    # - name: Get a regkey license from a license pool
    #   bigiq_regkey_license:
    #     key: "{{ lookup('bigiq_license', pool_name={{ regkey_pool_name }}, username={{ bigiq_user }}, password={{ bigiq_pass }}, host={{ hostvars[inventory_hostname]['mgmt_ip'] }}, port=443}}"
    #     state: present
    #     pool: "{{ regkey_pool_name }}"
    #   register: available_key_test

    # Double check that we are getting the hostname used in the license assignment task
    - debug:
        var: bigip_facts.devices[0].hostname

    # Discover new BIG-IP
    - name: Discover a new BIG-IP device
      bigiq_device_discovery:
        device_address: "{{ bigip_mgmt }}"
        device_username: "{{ bigip_user }}"
        device_password: "{{ bigip_password }}"
        modules: "{{ provisioned_modules }}"
        provider: 
          user: "{{ bigiq_user }}"
          password: "{{ bigiq_pass }}"
          server: "{{ hostvars[inventory_hostname]['mgmt_ip'] }}"
          validate_certs: no
      delegate_to: localhost

    # Next, license the BIG-IP when there are no active_modules (licensed) in bigip device facts
    - name: Register a managed device, by name
      bigiq_regkey_license_assignment:
        pool: "{{ regkey_pool_name }}"
        key: "{{ available_regkeys[0] }}"
        device: "{{ bigip_facts.devices[0].hostname }}"
        managed: yes
        state: present
        provider:
          user: "{{ bigiq_user }}"
          password: "{{ bigiq_pass }}"
          server: "{{ hostvars[inventory_hostname]['mgmt_ip'] }}"
          validate_certs: no
      delegate_to: localhost
      when: bigip_license_status | length == 0

    # Provision Requested modules
    - name: Provision ASM at "nominal" level when requested
      bigip_provision:
        module: asm
        level: nominal
        provider:
          server: "{{ bigip_mgmt }}"
          user: "{{ bigip_user }}"
          password: "{{ bigip_password }}"
        validate_certs: no
      delegate_to: localhost
      register: provision_status
      until: provision_status is success
      delay: 10
      retries: 20
      when: provision_asm == "yes"

    - name: Add ASM to list of modules to discover
      set_fact:
        provisioned_modules: "{{ provisioned_modules + ['asm'] + ['security_shared']}}"
      when: provision_asm == "yes"

    - name: Debug provisioned_modules list
      debug: var=provisioned_modules

    # Note that the module name is still gtm
    - name: Provision DNS at "nominal" level when requested
      bigip_provision:
        module: gtm
        level: nominal
        provider:
          server: "{{ bigip_mgmt }}"
          user: "{{ bigip_user }}"
          password: "{{ bigip_password }}"
        validate_certs: no
      delegate_to: localhost
      register: provision_status
      until: provision_status is success
      delay: 10
      retries: 20
      when: provision_dns == "yes"

    # Note the accepted module choice for dns is "dns"
    - name: Add DNS to list of modules to discover
      set_fact:
        provisioned_modules: "{{ provisioned_modules + ['dns'] }}"
      when: provision_dns == "yes"

    - name: Debug provisioned_modules list
      debug: var=provisioned_modules

    # Import configuration, use retries becausethis may fail the first two times if licensing is occurring
    - name: Force full device rediscovery
      bigiq_device_discovery:
        device_address: "{{ bigip_mgmt }}"
        modules: "{{ provisioned_modules }}"
        force: yes
        provider:
          user: "{{ bigiq_user }}"
          password: "{{ bigiq_pass }}"
          server: "{{ hostvars[inventory_hostname]['mgmt_ip'] }}"
          validate_certs: no
      register: provision_status
      until: provision_status is success
      delay: 10
      retries: 5
      delegate_to: localhost